import React, { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";

type MessageProps = {
  content: string;
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä JSON-–æ–±—ä–µ–∫—Ç–∞
function renderJsonBlock(json: Record<string, any>) {
  return (
    <div className="rounded-lg border p-4 bg-muted/40 max-w-md mx-auto my-4">
      <h3 className="text-lg font-semibold mb-2">üì¶ –î–∞–Ω–Ω—ã–µ</h3>
      {Object.entries(json).map(([key, value]) => (
        <div key={key}>
          <strong>{key}:</strong> {String(value)}
        </div>
      ))}
      <Button className="w-full">–ü–æ–¥–ø–∏—Å–∞—Ç—å</Button>
    </div>
  );
}

export function AssistantMessage({ content }: MessageProps) {
  const [jsonData, setJsonData] = useState<Record<string, any> | null>(null);

  useEffect(() => {
    try {
      // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã –¥–æ JSON (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
      const trimmed = content.trim();

      // –ü–æ–ø—ã—Ç–∫–∞ —Å—Ä–∞–∑—É —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
      const cleaned = trimmed.replace(/‚Äú|‚Äù/g, '"'); // –∑–∞–º–µ–Ω—è–µ–º –∫–∞–≤—ã—á–∫–∏
      const parsed = JSON.parse(cleaned);

      if (typeof parsed === "object" && parsed !== null) {
        setJsonData(parsed);
      }
    } catch (e) {
      // –ù–µ –≤–∞–ª–∏–¥–Ω—ã–π JSON ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }
  }, [content]);

  if (jsonData) {
    return renderJsonBlock(jsonData);
  }

  // –ï—Å–ª–∏ –Ω–µ JSON ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
  return <p className="whitespace-pre-line">{content}</p>;
}
